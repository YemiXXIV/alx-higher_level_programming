# Import module
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

# Test if input is correct
>>> bg.integer_validator("my_int", 56)

# Test string's value
>>> bg.integer_validator("name", "Mustapha")
Traceback (most recent call last):
	...
TypeError: name must be an integer

# Test with value of 0
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
	...
ValueError: age must be greater than 0

# Test with negative value
>>> bg.integer_validator("distance", -10)
Traceback (most recent call last):
	...
ValueError: distance must be greater than 0

# Test with No value
>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
	...
TypeError: distance must be an integer

# Test with dictionary value
>>> bg.integer_validator("distance", {7, 9})
Traceback (most recent call last):
	...
TypeError: distance must be an integer

# Test with Boolean value
>>> bg.integer_validator("distance", False)
Traceback (most recent call last):
	...
TypeError: distance must be an integer

# Test with list value
>>> bg.integer_validator("distance", [5])
Traceback (most recent call last):
	...
TypeError: distance must be an integer

# Test with incomplete tupple value
>>> bg.integer_validator("distance", (4,))
Traceback (most recent call last):
	...
TypeError: distance must be an integer

# Test with only one argument
>>> bg.integer_validator("age")
Traceback (most recent call last):
	...
TypeError: integer_validator() missing 1 required positional argument: 'value'
